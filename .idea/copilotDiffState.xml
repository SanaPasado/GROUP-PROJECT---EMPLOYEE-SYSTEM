<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/emp_management/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/emp_management/views.py" />
              <option name="originalContent" value="from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin&#10;from django.db.models import Q&#10;from django.http import JsonResponse&#10;from django.shortcuts import render, get_object_or_404, redirect&#10;&#10;from django.contrib.auth.decorators import login_required&#10;from django.contrib.admin.views.decorators import staff_member_required&#10;from django.views.generic import UpdateView, DetailView, ListView, DeleteView&#10;from django.urls import reverse_lazy, reverse&#10;from accounts.models import Employee&#10;from emp_management.forms import EmployeeUpdateForm, AdminEmployeeUpdateForm&#10;&#10;&#10;class EmpListView(LoginRequiredMixin, UserPassesTestMixin, ListView):&#10;    model = Employee&#10;    context_object_name = 'employees'&#10;    template_name = 'emp_management/employee_list.html'&#10;&#10;    def test_func(self):&#10;        # Only allow staff members to view the employee list&#10;        return self.request.user.is_staff&#10;&#10;    def get_queryset(self):&#10;        # kase nakikita yung admins sa list view i don wan dat&#10;        queryset = Employee.objects.filter(staff=False, admin=False)&#10;        query = self.request.GET.get('q')&#10;&#10;        if query:&#10;            queryset = queryset.filter(&#10;                Q(slug__icontains=query) |&#10;                Q(position__icontains=query) |&#10;                Q(department__icontains=query))&#10;        return queryset&#10;&#10;&#10;&#10;class EmpDetailView(LoginRequiredMixin, DetailView):&#10;    model = Employee&#10;    context_object_name = 'employee_detail'&#10;    template_name = 'emp_management/employee_detail.html'&#10;&#10;    def get_object(self):&#10;        return Employee.objects.get(slug=self.kwargs[&quot;slug&quot;])&#10;&#10;class EmpUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):&#10;    model = Employee&#10;    form_class = EmployeeUpdateForm&#10;    context_object_name = 'employee'   # &lt;--- we rename object → employee&#10;    template_name = 'emp_management/employee_update.html'&#10;&#10;    def test_func(self):&#10;        # Get the employee object that the user is trying to update&#10;        employee_to_update = self.get_object()&#10;        # Allow access if the current user is a staff member OR if they are updating their own profile&#10;        return self.request.user.is_staff or self.request.user == employee_to_update&#10;&#10;    def get_object(self, queryset=None):&#10;        return get_object_or_404(Employee, slug=self.kwargs[&quot;slug&quot;])&#10;&#10;    def form_valid(self, form):&#10;        try:&#10;            self.object = form.save()&#10;            return redirect(self.get_success_url())&#10;        except Exception as e:&#10;            print(f&quot;Error uploading to Cloudinary: {e}&quot;)&#10;            form.add_error('photo', 'There was an error uploading the photo. Please try again.')&#10;            return self.form_invalid(form)&#10;&#10;    def form_invalid(self, form):&#10;        print(&quot;Form errors:&quot;, form.errors)&#10;        return super().form_invalid(form)&#10;    #this is for debugging&#10;&#10;    def get_form_class(self):&#10;        if self.request.user.is_staff:&#10;            print(&quot;✅ Using ADMIN form&quot;)&#10;            return AdminEmployeeUpdateForm&#10;        print(&quot;✅ Using EMPLOYEE form&quot;)&#10;        return EmployeeUpdateForm&#10;&#10;    def get_success_url(self):&#10;        # after saving, redirect back to detail page&#10;        return reverse('emp_management:employee_detail', kwargs={'slug': self.object.slug})&#10;&#10;&#10;&#10;class EmpDeleteView(LoginRequiredMixin, DeleteView):&#10;    model = Employee&#10;    context_object_name = 'employee'&#10;    template_name = 'emp_management/employee_delete.html'&#10;    success_url = reverse_lazy('emp_management:employees')&#10;    #&#10;    # def test_func(self):&#10;    #     return self.request.user.is_staff or self.request.user.is_superuser&#10;&#10;&#10;&#10;#function for polling&#10;@login_required&#10;def get_employee_statuses(request):&#10;    employees = Employee.objects.all().values('slug', 'is_online')&#10;    statuses = {emp['slug']: emp['is_online'] for emp in employees}&#10;    return JsonResponse(statuses)&#10;&#10;@staff_member_required&#10;def admin_panel(request):&#10;    &quot;&quot;&quot;&#10;    A view for the admin panel, accessible only to staff members.&#10;    &quot;&quot;&quot;&#10;    return render(request, 'emp_management/admin_panel.html')&#10;&#10;" />
              <option name="updatedContent" value="from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin&#10;from django.db.models import Q&#10;from django.http import JsonResponse&#10;from django.shortcuts import render, get_object_or_404, redirect&#10;&#10;from django.contrib.auth.decorators import login_required&#10;from django.contrib.admin.views.decorators import staff_member_required&#10;from django.views.generic import UpdateView, DetailView, ListView, DeleteView&#10;from django.urls import reverse_lazy, reverse&#10;from accounts.models import Employee&#10;from emp_management.forms import EmployeeUpdateForm, AdminEmployeeUpdateForm&#10;&#10;&#10;class EmpListView(LoginRequiredMixin, UserPassesTestMixin, ListView):&#10;    model = Employee&#10;    context_object_name = 'employees'&#10;    template_name = 'emp_management/employee_list.html'&#10;&#10;    def test_func(self):&#10;        # Only allow staff members to view the employee list&#10;        return self.request.user.is_staff&#10;&#10;    def get_queryset(self):&#10;        # kase nakikita yung admins sa list view i don wan dat&#10;        queryset = Employee.objects.filter(staff=False, admin=False)&#10;        query = self.request.GET.get('q')&#10;&#10;        if query:&#10;            queryset = queryset.filter(&#10;                Q(slug__icontains=query) |&#10;                Q(position__icontains=query) |&#10;                Q(department__icontains=query))&#10;        return queryset&#10;&#10;&#10;&#10;class EmpDetailView(LoginRequiredMixin, DetailView):&#10;    model = Employee&#10;    context_object_name = 'employee_detail'&#10;    template_name = 'emp_management/employee_detail.html'&#10;&#10;    def get_object(self):&#10;        return Employee.objects.get(slug=self.kwargs[&quot;slug&quot;])&#10;&#10;class EmpUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):&#10;    model = Employee&#10;    form_class = EmployeeUpdateForm&#10;    context_object_name = 'employee'   # &lt;--- we rename object → employee&#10;    template_name = 'emp_management/employee_update.html'&#10;&#10;    def test_func(self):&#10;        # Get the employee object that the user is trying to update&#10;        employee_to_update = self.get_object()&#10;        # Allow access if the current user is a staff member OR if they are updating their own profile&#10;        return self.request.user.is_staff or self.request.user == employee_to_update&#10;&#10;    def get_object(self, queryset=None):&#10;        return get_object_or_404(Employee, slug=self.kwargs[&quot;slug&quot;])&#10;&#10;    def form_valid(self, form):&#10;        try:&#10;            self.object = form.save()&#10;            return redirect(self.get_success_url())&#10;        except Exception as e:&#10;            print(f&quot;Error uploading to Cloudinary: {e}&quot;)&#10;            form.add_error('photo', 'There was an error uploading the photo. Please try again.')&#10;            return self.form_invalid(form)&#10;&#10;    def form_invalid(self, form):&#10;        print(&quot;Form errors:&quot;, form.errors)&#10;        return super().form_invalid(form)&#10;    #this is for debugging&#10;&#10;    def get_form_class(self):&#10;        if self.request.user.is_staff:&#10;            print(&quot;✅ Using ADMIN form&quot;)&#10;            return AdminEmployeeUpdateForm&#10;        print(&quot;✅ Using EMPLOYEE form&quot;)&#10;        return EmployeeUpdateForm&#10;&#10;    def get_success_url(self):&#10;        # after saving, redirect back to detail page&#10;        return reverse('emp_management:employee_detail', kwargs={'slug': self.object.slug})&#10;&#10;&#10;&#10;class EmpDeleteView(LoginRequiredMixin, DeleteView):&#10;    model = Employee&#10;    context_object_name = 'employee'&#10;    template_name = 'emp_management/employee_delete.html'&#10;    success_url = reverse_lazy('emp_management:employees')&#10;    #&#10;    # def test_func(self):&#10;    #     return self.request.user.is_staff or self.request.user.is_superuser&#10;&#10;&#10;&#10;#function for polling&#10;@login_required&#10;def get_employee_statuses(request):&#10;    employees = Employee.objects.all().values('slug', 'is_online')&#10;    statuses = {emp['slug']: emp['is_online'] for emp in employees}&#10;    return JsonResponse(statuses)&#10;&#10;@staff_member_required&#10;def admin_panel(request):&#10;    &quot;&quot;&quot;&#10;    A view for the admin panel, accessible only to staff members.&#10;    &quot;&quot;&quot;&#10;    return render(request, 'emp_management/admin_panel.html')" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>