<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/attendance/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/attendance/models.py" />
              <option name="originalContent" value="from django.utils import timezone&#10;from django.db import models&#10;&#10;&#10;def get_current_date():&#10;    &quot;&quot;&quot;Return current date in the default timezone&quot;&quot;&quot;&#10;    return timezone.now().date()&#10;&#10;&#10;class Attendance(models.Model):&#10;    employee = models.ForeignKey('accounts.Employee', on_delete=models.CASCADE)&#10;    date = models.DateField(default=get_current_date)&#10;    time_in = models.DateTimeField(null=True, blank=True)&#10;    time_out = models.DateTimeField(null=True, blank=True)&#10;&#10;    # Overtime approval fields&#10;    overtime_hours = models.DecimalField(max_digits=5, decimal_places=2, default=0.00, help_text=&quot;Calculated overtime hours for this day&quot;)&#10;    overtime_approved = models.BooleanField(default=False, help_text=&quot;Whether overtime has been approved by admin&quot;)&#10;    overtime_rejected = models.BooleanField(default=False, help_text=&quot;Whether overtime has been rejected by admin&quot;)&#10;    overtime_approved_by = models.ForeignKey('accounts.Employee', on_delete=models.SET_NULL, null=True, blank=True, related_name='approved_overtimes', help_text=&quot;Admin who approved/rejected overtime&quot;)&#10;    overtime_approval_date = models.DateTimeField(null=True, blank=True, help_text=&quot;When overtime was approved/rejected&quot;)&#10;    overtime_notes = models.TextField(blank=True, help_text=&quot;Admin notes about overtime approval/rejection&quot;)&#10;&#10;    class Meta:&#10;        unique_together = ('employee', 'date')&#10;        ordering = ['-date']&#10;&#10;    def __str__(self):&#10;        return f&quot;Attendance for {self.employee} on {self.date}&quot;&#10;&#10;    def calculate_overtime_hours(self):&#10;        &quot;&quot;&quot;Calculate overtime hours based on time worked vs expected daily hours&quot;&quot;&quot;&#10;        if self.time_in and self.time_out:&#10;            duration = self.time_out - self.time_in&#10;            hours_worked = duration.total_seconds() / 3600&#10;            expected_daily_hours = float(self.employee.weekly_hours) / 5&#10;            overtime = max(0, hours_worked - expected_daily_hours)&#10;            return round(overtime, 2)&#10;        return 0&#10;&#10;    def approve_overtime(self, approved_by, notes=&quot;&quot;):&#10;        &quot;&quot;&quot;Approve overtime hours for this attendance record&quot;&quot;&quot;&#10;        self.overtime_approved = True&#10;        self.overtime_rejected = False&#10;        self.overtime_approved_by = approved_by&#10;        self.overtime_approval_date = timezone.now()&#10;        self.overtime_notes = notes&#10;        self.save()&#10;&#10;    def reject_overtime(self, rejected_by, notes=&quot;&quot;):&#10;        &quot;&quot;&quot;Reject overtime hours for this attendance record&quot;&quot;&quot;&#10;        self.overtime_approved = False&#10;        self.overtime_rejected = True&#10;        self.overtime_approved_by = rejected_by&#10;        self.overtime_approval_date = timezone.now()&#10;        self.overtime_notes = notes&#10;        self.save()&#10;&#10;    @property&#10;    def overtime_status(self):&#10;        &quot;&quot;&quot;Get the current overtime approval status&quot;&quot;&quot;&#10;        if self.overtime_approved:&#10;            return &quot;approved&quot;&#10;        elif self.overtime_rejected:&#10;            return &quot;rejected&quot;&#10;        elif self.overtime_hours &gt; 0:&#10;            return &quot;pending&quot;&#10;        else:&#10;            return &quot;none&quot;&#10;&#10;    def save(self, *args, **kwargs):&#10;        # Calculate overtime hours automatically&#10;        self.overtime_hours = self.calculate_overtime_hours()&#10;&#10;        # Update employee's online status based on attendance&#10;        if self.time_in and not self.time_out:&#10;            # Employee clocked in - set as online/working&#10;            self.employee.is_online = True&#10;        elif self.time_out:&#10;            # Employee clocked out - set as offline&#10;            self.employee.is_online = False&#10;&#10;        # Save the employee status&#10;        self.employee.save(update_fields=['is_online'])&#10;&#10;        super().save(*args, **kwargs)&#10;&#10;    @property&#10;    def duration(self):&#10;        &quot;&quot;&quot;Calculate work duration for this attendance record&quot;&quot;&quot;&#10;        if self.time_in and self.time_out:&#10;            duration = self.time_out - self.time_in&#10;            total_minutes = int(duration.total_seconds() / 60)&#10;            hours = total_minutes // 60&#10;            minutes = total_minutes % 60&#10;            return f&quot;{hours}h {minutes}m&quot;&#10;        elif self.time_in:&#10;            # Currently working&#10;            duration = timezone.now() - self.time_in&#10;            total_minutes = int(duration.total_seconds() / 60)&#10;            hours = total_minutes // 60&#10;            minutes = total_minutes % 60&#10;            return f&quot;{hours}h {minutes}m (ongoing)&quot;&#10;        return &quot;No time recorded&quot;&#10;&#10;    @property&#10;    def is_complete(self):&#10;        &quot;&quot;&quot;Check if both time_in and time_out are recorded&quot;&quot;&quot;&#10;        return self.time_in is not None and self.time_out is not None&#10;&#10;    @property&#10;    def is_ongoing(self):&#10;        &quot;&quot;&quot;Check if employee has clocked in but not clocked out&quot;&quot;&quot;&#10;        return self.time_in is not None and self.time_out is None&#10;" />
              <option name="updatedContent" value="from django.utils import timezone&#10;from django.db import models&#10;&#10;&#10;def get_current_date():&#10;    &quot;&quot;&quot;Return current date in the default timezone&quot;&quot;&quot;&#10;    return timezone.now().date()&#10;&#10;&#10;class Attendance(models.Model):&#10;    employee = models.ForeignKey('accounts.Employee', on_delete=models.CASCADE)&#10;    date = models.DateField(default=get_current_date)&#10;    time_in = models.DateTimeField(null=True, blank=True)&#10;    time_out = models.DateTimeField(null=True, blank=True)&#10;&#10;    # Overtime approval fields&#10;    overtime_hours = models.DecimalField(max_digits=5, decimal_places=2, default=0.00, help_text=&quot;Calculated overtime hours for this day&quot;)&#10;    overtime_approved = models.BooleanField(default=False, help_text=&quot;Whether overtime has been approved by admin&quot;)&#10;    overtime_rejected = models.BooleanField(default=False, help_text=&quot;Whether overtime has been rejected by admin&quot;)&#10;    overtime_approved_by = models.ForeignKey('accounts.Employee', on_delete=models.SET_NULL, null=True, blank=True, related_name='approved_overtimes', help_text=&quot;Admin who approved/rejected overtime&quot;)&#10;    overtime_approval_date = models.DateTimeField(null=True, blank=True, help_text=&quot;When overtime was approved/rejected&quot;)&#10;    overtime_notes = models.TextField(blank=True, help_text=&quot;Admin notes about overtime approval/rejection&quot;)&#10;&#10;    class Meta:&#10;        unique_together = ('employee', 'date')&#10;        ordering = ['-date']&#10;&#10;    def __str__(self):&#10;        return f&quot;Attendance for {self.employee} on {self.date}&quot;&#10;&#10;    def calculate_overtime_hours(self):&#10;        &quot;&quot;&quot;Calculate overtime hours based on time worked vs expected daily hours&quot;&quot;&quot;&#10;        if self.time_in and self.time_out:&#10;            # Ensure both are datetime objects&#10;            if hasattr(self.time_in, 'total_seconds'):  # Check if it's a timedelta&#10;                return 0&#10;            if hasattr(self.time_out, 'total_seconds'):  # Check if it's a timedelta&#10;                return 0&#10;                &#10;            # Both should be datetime objects now&#10;            try:&#10;                duration = self.time_out - self.time_in&#10;                hours_worked = duration.total_seconds() / 3600&#10;                expected_daily_hours = float(self.employee.weekly_hours) / 5&#10;                overtime = max(0, hours_worked - expected_daily_hours)&#10;                return round(overtime, 2)&#10;            except (TypeError, AttributeError) as e:&#10;                # If there's still an error, return 0 to prevent crashes&#10;                print(f&quot;Error calculating overtime hours: {e}&quot;)&#10;                return 0&#10;        return 0&#10;&#10;    def approve_overtime(self, approved_by, notes=&quot;&quot;):&#10;        &quot;&quot;&quot;Approve overtime hours for this attendance record&quot;&quot;&quot;&#10;        self.overtime_approved = True&#10;        self.overtime_rejected = False&#10;        self.overtime_approved_by = approved_by&#10;        self.overtime_approval_date = timezone.now()&#10;        self.overtime_notes = notes&#10;        self.save()&#10;&#10;    def reject_overtime(self, rejected_by, notes=&quot;&quot;):&#10;        &quot;&quot;&quot;Reject overtime hours for this attendance record&quot;&quot;&quot;&#10;        self.overtime_approved = False&#10;        self.overtime_rejected = True&#10;        self.overtime_approved_by = rejected_by&#10;        self.overtime_approval_date = timezone.now()&#10;        self.overtime_notes = notes&#10;        self.save()&#10;&#10;    @property&#10;    def overtime_status(self):&#10;        &quot;&quot;&quot;Get the current overtime approval status&quot;&quot;&quot;&#10;        if self.overtime_approved:&#10;            return &quot;approved&quot;&#10;        elif self.overtime_rejected:&#10;            return &quot;rejected&quot;&#10;        elif self.overtime_hours &gt; 0:&#10;            return &quot;pending&quot;&#10;        else:&#10;            return &quot;none&quot;&#10;&#10;    def save(self, *args, **kwargs):&#10;        # Calculate overtime hours automatically&#10;        self.overtime_hours = self.calculate_overtime_hours()&#10;&#10;        # Update employee's online status based on attendance&#10;        if self.time_in and not self.time_out:&#10;            # Employee clocked in - set as online/working&#10;            self.employee.is_online = True&#10;        elif self.time_out:&#10;            # Employee clocked out - set as offline&#10;            self.employee.is_online = False&#10;&#10;        # Save the employee status&#10;        self.employee.save(update_fields=['is_online'])&#10;&#10;        super().save(*args, **kwargs)&#10;&#10;    @property&#10;    def duration(self):&#10;        &quot;&quot;&quot;Calculate work duration for this attendance record&quot;&quot;&quot;&#10;        if self.time_in and self.time_out:&#10;            duration = self.time_out - self.time_in&#10;            total_minutes = int(duration.total_seconds() / 60)&#10;            hours = total_minutes // 60&#10;            minutes = total_minutes % 60&#10;            return f&quot;{hours}h {minutes}m&quot;&#10;        elif self.time_in:&#10;            # Currently working&#10;            duration = timezone.now() - self.time_in&#10;            total_minutes = int(duration.total_seconds() / 60)&#10;            hours = total_minutes // 60&#10;            minutes = total_minutes % 60&#10;            return f&quot;{hours}h {minutes}m (ongoing)&quot;&#10;        return &quot;No time recorded&quot;&#10;&#10;    @property&#10;    def is_complete(self):&#10;        &quot;&quot;&quot;Check if both time_in and time_out are recorded&quot;&quot;&quot;&#10;        return self.time_in is not None and self.time_out is not None&#10;&#10;    @property&#10;    def is_ongoing(self):&#10;        &quot;&quot;&quot;Check if employee has clocked in but not clocked out&quot;&quot;&quot;&#10;        return self.time_in is not None and self.time_out is None" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/notifications/notification_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/notifications/notification_form.html" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;{% block title %}&lt;title&gt;Send Paycheck Notification&lt;/title&gt;{% endblock %}&#10;&#10;{% block content %}&#10;&lt;div class=&quot;container my-5&quot;&gt;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#10;        &lt;div class=&quot;col-md-8&quot;&gt;&#10;            &lt;div class=&quot;card shadow&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-success text-white&quot;&gt;&#10;                    &lt;h3 class=&quot;card-title mb-0&quot;&gt;&#10;                        &lt;i class=&quot;bi bi-cash-stack&quot;&gt;&lt;/i&gt; Send Paycheck Notification&#10;                    &lt;/h3&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;form method=&quot;post&quot;&gt;&#10;                        {% csrf_token %}&#10;                        &#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;{{ form.employee.id_for_label }}&quot; class=&quot;form-label&quot;&gt;&#10;                                &lt;i class=&quot;bi bi-person&quot;&gt;&lt;/i&gt; Select Employee *&#10;                            &lt;/label&gt;&#10;                            {{ form.employee }}&#10;                            {% if form.employee.errors %}&#10;                                &lt;div class=&quot;text-danger mt-1&quot;&gt;&#10;                                    {% for error in form.employee.errors %}&#10;                                        &lt;small&gt;{{ error }}&lt;/small&gt;&#10;                                    {% endfor %}&#10;                                &lt;/div&gt;&#10;                            {% endif %}&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;{{ form.amount.id_for_label }}&quot; class=&quot;form-label&quot;&gt;&#10;                                &lt;i class=&quot;bi bi-currency-dollar&quot;&gt;&lt;/i&gt; Paycheck Amount *&#10;                            &lt;/label&gt;&#10;                            {{ form.amount }}&#10;                            {% if form.amount.errors %}&#10;                                &lt;div class=&quot;text-danger mt-1&quot;&gt;&#10;                                    {% for error in form.amount.errors %}&#10;                                        &lt;small&gt;{{ error }}&lt;/small&gt;&#10;                                    {% endfor %}&#10;                                &lt;/div&gt;&#10;                            {% endif %}&#10;                            &lt;small class=&quot;form-text text-muted&quot;&gt;Enter the paycheck amount in PHP&lt;/small&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;{{ form.message.id_for_label }}&quot; class=&quot;form-label&quot;&gt;&#10;                                &lt;i class=&quot;bi bi-chat-text&quot;&gt;&lt;/i&gt; Message&#10;                            &lt;/label&gt;&#10;                            {{ form.message }}&#10;                            {% if form.message.errors %}&#10;                                &lt;div class=&quot;text-danger mt-1&quot;&gt;&#10;                                    {% for error in form.message.errors %}&#10;                                        &lt;small&gt;{{ error }}&lt;/small&gt;&#10;                                    {% endfor %}&#10;                                &lt;/div&gt;&#10;                            {% endif %}&#10;                            &lt;small class=&quot;form-text text-muted&quot;&gt;Add a personalized message (optional)&lt;/small&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;d-flex gap-2&quot;&gt;&#10;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;&#10;                                &lt;i class=&quot;bi bi-send&quot;&gt;&lt;/i&gt; Send Paycheck Notification&#10;                            &lt;/button&gt;&#10;                            &lt;a href=&quot;{% url 'notifications:paycheck_dashboard' %}&quot; class=&quot;btn btn-secondary&quot;&gt;&#10;                                &lt;i class=&quot;bi bi-arrow-left&quot;&gt;&lt;/i&gt; Back to Dashboard&#10;                            &lt;/a&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>